// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::cpb::generation::*;
import meta::pure::executionPlan::profiles::*;
import meta::external::format::cpb::generation::tests::*;
import meta::json::*;

import meta::pure::persistence::metamodel::*;
import meta::pure::persistence::metamodel::trigger::*;
import meta::pure::persistence::metamodel::notifier::*;
import meta::pure::persistence::metamodel::reader::*;
import meta::pure::persistence::metamodel::persister::*;
import meta::pure::persistence::metamodel::persister::audit::*;
import meta::pure::persistence::metamodel::persister::targetshape::*;
import meta::pure::persistence::metamodel::persister::ingestmode::*;
import meta::pure::persistence::metamodel::persister::ingestmode::snapshot::*;
import meta::pure::persistence::metamodel::persister::deduplication::*;
import meta::legend::service::metamodel::*;
import meta::pure::persistence::metamodel::batch::*;
import meta::pure::persistence::metamodel::batch::targetspecification::*;
import meta::pure::persistence::metamodel::batch::deduplication::*;
import meta::pure::persistence::metamodel::batch::mode::snapshot::*;
import meta::pure::persistence::metamodel::batch::audit::*;

Profile meta::external::format::cpb::generation::tests::CpbProperty
{
   tags: [
     p1, p2, p3
   ];
}

Class <<access.private>> meta::external::format::cpb::generation::tests::A
{
    a: String[1];
}

function <<access.private>> meta::external::format::cpb::generation::tests::getPersistence(): Persistence[1]
{
  let package = meta::pure::functions::meta::pathToPackage('cnas::pipes', true);

  let notifier = ^Notifier(
    notifyees = [
      ^EmailNotifyee(emailAddress = 'basecamp@k2.com'),
      ^PagerDutyNotifyee(url = 'http://mountains.are.cool')
	]
  );

  let service = ^Service(
	package = $package,
	pattern = '/mountains/lhotse',
	owners = ['ram'],
	autoActivateUpdates = true,
	documentation = 'A service',
	execution = ^PureExecution(func = {|true}),
	test = ^Test(),
	tags = []
  );

  let p = ^Persistence(
    package = $package,
    documentation = 'Mountains persist for a long time',
    trigger = ^ManualTrigger(),
    service = $service,
    persister = ^BatchPersister(
      targetShape = ^FlatTarget(
        modelClass = A,
        targetName = 's3sink',
        deduplicationStrategy = ^NoDeduplicationStrategy(),
		ingestMode = ^NontemporalSnapshot(
          auditing = ^NoAuditing()
        )
      )
    ),
    notifier = $notifier
  );

  $p;
}


function <<test.Test>> {serverVersion.start='v1_20_0'} meta::external::format::cpb::generation::tests::transform_persistenceToBackend(): Boolean[1]
{
  let p = getPersistence();
  let config = meta::external::format::cpb::generation::defaultConfig();
  let schema = transform(^$config(scopeElements=[$p]))->at(0)->at(0).content;
  assertEquals('{"items":"Mountains persist for a long time","notifiers":["basecamp@k2.com","http://mountains.are.cool"]}', $schema);
}

